{"ast":null,"code":"'use strict';\n\n/**\n * yenv.js\n * environment management with YAML.\n * by Jeff Hansen\n */\nconst path = require('path');\nconst {\n  keyblade\n} = require('keyblade');\nconst applyEnv = require('./applyEnv');\nconst loadAndParse = require('./loadAndParse');\nconst processImports = require('./processImports');\n\n/**\n * Synchronously reads the given YAML-file,\n * then overwrites the values with what's currently in process.env.\n *\n * @param {String} filePath\n * The file to read. Defaults to \"env.yaml\".\n *\n * @param {Object} opts\n * Options object.\n *\n * @param {String} opts.env\n * The environment to read from in the file root.\n * Defaults to process.env.NODE_ENV, and then to \"development\"\n *\n * @param {Object} opts.envObject\n * The environment object to read from, defaults to process.env.\n *\n * @return {Object}\n * The environment object.\n *\n * @example\n *\n * Declaring:\n *\n * ```yaml\n * development:\n *   PORT: 8080\n * production:\n *   PORT: 80\n * ```\n *\n * Reading:\n *\n * ```javascript\n * // Simple\n * const env = yenv('some/file.yaml')\n *\n * // Advanced\n * const env = yenv('some/file.yaml', {\n *   env: 'production' // the top-level element to read.\n * })\n * ```\n */\nmodule.exports = function yenv(filePath, opts) {\n  opts = Object.assign({\n    envObject: process.env,\n    cwd: process.cwd(),\n    raw: false,\n    strict: true,\n    optionalKeys: []\n  }, opts || {});\n  opts = Object.assign({\n    env: opts.envObject.NODE_ENV || 'development'\n  }, opts);\n  filePath = path.resolve(opts.cwd, filePath || 'env.yaml');\n  const parsed = loadAndParse(filePath, false);\n  const processed = processImports(parsed, Object.assign({}, opts, {\n    importingFile: filePath\n  }));\n  const result = applyEnv(processed, opts);\n  if (opts.strict) {\n    return keyblade(result, {\n      ignore: opts.optionalKeys,\n      message: key => `[yenv] ${key} not found in the loaded environment`,\n      logBeforeThrow: opts.logBeforeThrow\n    });\n  }\n  return result;\n};","map":{"version":3,"names":["path","require","keyblade","applyEnv","loadAndParse","processImports","module","exports","yenv","filePath","opts","Object","assign","envObject","process","env","cwd","raw","strict","optionalKeys","NODE_ENV","resolve","parsed","processed","importingFile","result","ignore","message","key","logBeforeThrow"],"sources":["/home/roncalloj/Codes/new_project_react/frontend/node_modules/yenv/lib/yenv.js"],"sourcesContent":["'use strict'\n\n/**\n * yenv.js\n * environment management with YAML.\n * by Jeff Hansen\n */\nconst path = require('path')\nconst { keyblade } = require('keyblade')\nconst applyEnv = require('./applyEnv')\nconst loadAndParse = require('./loadAndParse')\nconst processImports = require('./processImports')\n\n/**\n * Synchronously reads the given YAML-file,\n * then overwrites the values with what's currently in process.env.\n *\n * @param {String} filePath\n * The file to read. Defaults to \"env.yaml\".\n *\n * @param {Object} opts\n * Options object.\n *\n * @param {String} opts.env\n * The environment to read from in the file root.\n * Defaults to process.env.NODE_ENV, and then to \"development\"\n *\n * @param {Object} opts.envObject\n * The environment object to read from, defaults to process.env.\n *\n * @return {Object}\n * The environment object.\n *\n * @example\n *\n * Declaring:\n *\n * ```yaml\n * development:\n *   PORT: 8080\n * production:\n *   PORT: 80\n * ```\n *\n * Reading:\n *\n * ```javascript\n * // Simple\n * const env = yenv('some/file.yaml')\n *\n * // Advanced\n * const env = yenv('some/file.yaml', {\n *   env: 'production' // the top-level element to read.\n * })\n * ```\n */\nmodule.exports = function yenv(filePath, opts) {\n  opts = Object.assign(\n    {\n      envObject: process.env,\n      cwd: process.cwd(),\n      raw: false,\n      strict: true,\n      optionalKeys: [],\n    },\n    opts || {}\n  )\n\n  opts = Object.assign(\n    {\n      env: opts.envObject.NODE_ENV || 'development',\n    },\n    opts\n  )\n\n  filePath = path.resolve(opts.cwd, filePath || 'env.yaml')\n  const parsed = loadAndParse(filePath, false)\n  const processed = processImports(\n    parsed,\n    Object.assign({}, opts, {\n      importingFile: filePath,\n    })\n  )\n\n  const result = applyEnv(processed, opts)\n  if (opts.strict) {\n    return keyblade(result, {\n      ignore: opts.optionalKeys,\n      message: (key) => `[yenv] ${key} not found in the loaded environment`,\n      logBeforeThrow: opts.logBeforeThrow,\n    })\n  }\n  return result\n}\n"],"mappings":"AAAA,YAAY;;AAEZ;AACA;AACA;AACA;AACA;AACA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAM;EAAEC;AAAS,CAAC,GAAGD,OAAO,CAAC,UAAU,CAAC;AACxC,MAAME,QAAQ,GAAGF,OAAO,CAAC,YAAY,CAAC;AACtC,MAAMG,YAAY,GAAGH,OAAO,CAAC,gBAAgB,CAAC;AAC9C,MAAMI,cAAc,GAAGJ,OAAO,CAAC,kBAAkB,CAAC;;AAElD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAK,MAAM,CAACC,OAAO,GAAG,SAASC,IAAIA,CAACC,QAAQ,EAAEC,IAAI,EAAE;EAC7CA,IAAI,GAAGC,MAAM,CAACC,MAAM,CAClB;IACEC,SAAS,EAAEC,OAAO,CAACC,GAAG;IACtBC,GAAG,EAAEF,OAAO,CAACE,GAAG,CAAC,CAAC;IAClBC,GAAG,EAAE,KAAK;IACVC,MAAM,EAAE,IAAI;IACZC,YAAY,EAAE;EAChB,CAAC,EACDT,IAAI,IAAI,CAAC,CACX,CAAC;EAEDA,IAAI,GAAGC,MAAM,CAACC,MAAM,CAClB;IACEG,GAAG,EAAEL,IAAI,CAACG,SAAS,CAACO,QAAQ,IAAI;EAClC,CAAC,EACDV,IACF,CAAC;EAEDD,QAAQ,GAAGT,IAAI,CAACqB,OAAO,CAACX,IAAI,CAACM,GAAG,EAAEP,QAAQ,IAAI,UAAU,CAAC;EACzD,MAAMa,MAAM,GAAGlB,YAAY,CAACK,QAAQ,EAAE,KAAK,CAAC;EAC5C,MAAMc,SAAS,GAAGlB,cAAc,CAC9BiB,MAAM,EACNX,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEF,IAAI,EAAE;IACtBc,aAAa,EAAEf;EACjB,CAAC,CACH,CAAC;EAED,MAAMgB,MAAM,GAAGtB,QAAQ,CAACoB,SAAS,EAAEb,IAAI,CAAC;EACxC,IAAIA,IAAI,CAACQ,MAAM,EAAE;IACf,OAAOhB,QAAQ,CAACuB,MAAM,EAAE;MACtBC,MAAM,EAAEhB,IAAI,CAACS,YAAY;MACzBQ,OAAO,EAAGC,GAAG,IAAM,UAASA,GAAI,sCAAqC;MACrEC,cAAc,EAAEnB,IAAI,CAACmB;IACvB,CAAC,CAAC;EACJ;EACA,OAAOJ,MAAM;AACf,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}