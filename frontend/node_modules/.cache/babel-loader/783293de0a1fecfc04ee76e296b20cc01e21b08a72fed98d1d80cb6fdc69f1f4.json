{"ast":null,"code":"'use strict';\n\nconst composeSections = require('./composeSections');\nconst coerce = require('coercer');\n\n/**\n * Returns a new object where the environment\n * values have been applied the given values.\n *\n * Additionally, composes sections as described by the wanted section's `compose`\n * attribute.\n *\n * @param {Object} parsed\n * The parsed object from the YAML-file.\n *\n * @param {String} opts.env\n * The environment section we want to return.\n *\n * @param {Object} opts.envObject\n * The environment object.\n * @param {Object} opts.raw\n * If `true`, formats values as strings, if `false`, uses `coercer`.\n *\n * @return {Object}\n * The merged object\n *\n * @api private\n */\nmodule.exports = function applyEnv(parsed, opts) {\n  const wantedSection = composeSections(parsed, [opts.env]);\n  const result = Object.assign({}, wantedSection, opts.envObject);\n  return opts.raw ? raw(result) : coerce(result);\n};\n\n/**\n * Serializes env values as strings.\n */\nfunction raw(obj) {\n  const result = {};\n  for (const key in obj) {\n    const value = obj[key];\n    if (value !== null && value !== undefined) {\n      result[key] = value.toString();\n    }\n  }\n  return result;\n}","map":{"version":3,"names":["composeSections","require","coerce","module","exports","applyEnv","parsed","opts","wantedSection","env","result","Object","assign","envObject","raw","obj","key","value","undefined","toString"],"sources":["/home/roncalloj/Codes/new_project_react/frontend/node_modules/yenv/lib/applyEnv.js"],"sourcesContent":["'use strict'\nconst composeSections = require('./composeSections')\nconst coerce = require('coercer')\n\n/**\n * Returns a new object where the environment\n * values have been applied the given values.\n *\n * Additionally, composes sections as described by the wanted section's `compose`\n * attribute.\n *\n * @param {Object} parsed\n * The parsed object from the YAML-file.\n *\n * @param {String} opts.env\n * The environment section we want to return.\n *\n * @param {Object} opts.envObject\n * The environment object.\n * @param {Object} opts.raw\n * If `true`, formats values as strings, if `false`, uses `coercer`.\n *\n * @return {Object}\n * The merged object\n *\n * @api private\n */\nmodule.exports = function applyEnv(parsed, opts) {\n  const wantedSection = composeSections(parsed, [opts.env])\n\n  const result = Object.assign({}, wantedSection, opts.envObject)\n  return opts.raw ? raw(result) : coerce(result)\n}\n\n/**\n * Serializes env values as strings.\n */\nfunction raw(obj) {\n  const result = {}\n  for (const key in obj) {\n    const value = obj[key]\n    if (value !== null && value !== undefined) {\n      result[key] = value.toString()\n    }\n  }\n  return result\n}\n"],"mappings":"AAAA,YAAY;;AACZ,MAAMA,eAAe,GAAGC,OAAO,CAAC,mBAAmB,CAAC;AACpD,MAAMC,MAAM,GAAGD,OAAO,CAAC,SAAS,CAAC;;AAEjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAE,MAAM,CAACC,OAAO,GAAG,SAASC,QAAQA,CAACC,MAAM,EAAEC,IAAI,EAAE;EAC/C,MAAMC,aAAa,GAAGR,eAAe,CAACM,MAAM,EAAE,CAACC,IAAI,CAACE,GAAG,CAAC,CAAC;EAEzD,MAAMC,MAAM,GAAGC,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEJ,aAAa,EAAED,IAAI,CAACM,SAAS,CAAC;EAC/D,OAAON,IAAI,CAACO,GAAG,GAAGA,GAAG,CAACJ,MAAM,CAAC,GAAGR,MAAM,CAACQ,MAAM,CAAC;AAChD,CAAC;;AAED;AACA;AACA;AACA,SAASI,GAAGA,CAACC,GAAG,EAAE;EAChB,MAAML,MAAM,GAAG,CAAC,CAAC;EACjB,KAAK,MAAMM,GAAG,IAAID,GAAG,EAAE;IACrB,MAAME,KAAK,GAAGF,GAAG,CAACC,GAAG,CAAC;IACtB,IAAIC,KAAK,KAAK,IAAI,IAAIA,KAAK,KAAKC,SAAS,EAAE;MACzCR,MAAM,CAACM,GAAG,CAAC,GAAGC,KAAK,CAACE,QAAQ,CAAC,CAAC;IAChC;EACF;EACA,OAAOT,MAAM;AACf"},"metadata":{},"sourceType":"script","externalDependencies":[]}